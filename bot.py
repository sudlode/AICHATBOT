import os
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import openai
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
from gtts import gTTS
from PIL import Image, ImageDraw
import io
import random
import requests
from deep_translator import GoogleTranslator

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
TOKEN = os.getenv("TOKEN", "").strip()
KEY = os.getenv("KEY", "").strip()

if not TOKEN or ":" not in TOKEN:
    logger.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π Telegram —Ç–æ–∫–µ–Ω! –§–æ—Ä–º–∞—Ç: 123456789:ABCdef...")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

if KEY:
    key = KEY
else:
    logger.warning("‚ö†Ô∏è OpenAI –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π - –¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±–º–µ–∂–µ–Ω—ñ")

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
def get_db():
    return sqlite3.connect('/tmp/bot.db' if 'RENDER' in os.environ else 'bot.db')

conn = get_db()
cursor = conn.cursor()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    registered_at TEXT,
    banned_until TEXT,
    ban_reason TEXT,
    premium_until TEXT,
    language TEXT DEFAULT 'uk'
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS limits (
    user_id INTEGER PRIMARY KEY,
    images_left INTEGER DEFAULT 100,
    audio_left INTEGER DEFAULT 100,
    circles_left INTEGER DEFAULT 100,
    last_reset_date TEXT
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS promo_codes (
    code TEXT PRIMARY KEY,
    reward_type TEXT,
    reward_value TEXT,
    created_by INTEGER,
    uses_left INTEGER,
    expires_at TEXT
)''')

conn.commit()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
ADMINS = [1119767022]  # –í–∞—à Telegram ID
LANGUAGES = {'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'en': 'üá¨üáß English'}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('/kontrolni üìù'),
        KeyboardButton('/gdz üìö'),
        KeyboardButton('/spusuvanna ‚úçÔ∏è'),
        KeyboardButton('/promo üéÅ'),
        KeyboardButton('/shawarma üåØ'),
        KeyboardButton('/help ‚ùì')
    )
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton('/promo_create'),
        KeyboardButton('/promo_list'),
        KeyboardButton('/ban_user'),
        KeyboardButton('/unban_user')
    )
    return keyboard

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
async def generate_image(user_id: int, prompt: str):
    cursor.execute("SELECT images_left FROM limits WHERE user_id=?", (user_id,))
    if cursor.fetchone()[0] <= 0:
        return None, "‚ùå –õ—ñ–º—ñ—Ç –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ (100/–¥–µ–Ω—å)"
    
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size="512x512"
    )
    image_url = response['data'][0]['url']
    
    cursor.execute(
        "UPDATE limits SET images_left = images_left - 1 WHERE user_id=?",
        (user_id,)
    )
    conn.commit()
    
    return image_url, None

async def generate_audio(user_id: int, text: str, lang='uk'):
    cursor.execute("SELECT audio_left FROM limits WHERE user_id=?", (user_id,))
    if cursor.fetchone()[0] <= 0:
        return None, "‚ùå –õ—ñ–º—ñ—Ç –∞—É–¥—ñ–æ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (100/–¥–µ–Ω—å)"
    
    tts = gTTS(text=text, lang=lang)
    audio_buffer = io.BytesIO()
    tts.write_to_fp(audio_buffer)
    audio_buffer.seek(0)
    
    cursor.execute(
        "UPDATE limits SET audio_left = audio_left - 1 WHERE user_id=?",
        (user_id,)
    )
    conn.commit()
    
    return audio_buffer, None

async def generate_circle(user_id: int):
    cursor.execute("SELECT circles_left FROM limits WHERE user_id=?", (user_id,))
    if cursor.fetchone()[0] <= 0:
        return None, "‚ùå –õ—ñ–º—ñ—Ç –∫—Ä—É–∂–µ—á–∫—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (100/–¥–µ–Ω—å)"
    
    img = Image.new('RGB', (512, 512), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)))
    draw = ImageDraw.Draw(img)
    draw.ellipse([(50, 50), (462, 462)], outline='white', width=10)
    
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)
    
    cursor.execute(
        "UPDATE limits SET circles_left = circles_left - 1 WHERE user_id=?",
        (user_id,)
    )
    conn.commit()
    
    return img_buffer, None

async def generate_ai_response(prompt: str, lang: str) -> str:
    if not OPENAI_API_KEY:
        return "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
    
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message['content']

# –ö–æ–º–∞–Ω–¥–∏
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        await message.answer("üëë –í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω–µ!", reply_markup=get_admin_keyboard())
    else:
        await message.answer("üè´ –í—ñ—Ç–∞—é —É –®–∫—ñ–ª—å–Ω–æ–º—É –ø–æ–º—ñ—á–Ω–∏–∫—É!", reply_markup=get_main_keyboard())
    
    cursor.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, username, registered_at) VALUES (?, ?, ?)",
            (user_id, message.from_user.username, datetime.now().isoformat())
        )
        cursor.execute(
            "INSERT INTO limits (user_id, last_reset_date) VALUES (?, ?)",
            (user_id, datetime.now().isoformat())
        )
        conn.commit()

@dp.message(Command('kontrolni'))
async def cmd_kontrolni(message: types.Message):
    task = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not task:
        return await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏")
    
    response = await generate_ai_response(f"–†–æ–∑–≤'—è–∂–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É —Ä–æ–±–æ—Ç—É: {task}", 'uk')
    await message.answer(f"üìö –†–æ–∑–≤'—è–∑–æ–∫:\n{response}")

@dp.message(Command('gdz'))
async def cmd_gdz(message: types.Message):
    task = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not task:
        return await message.answer("üìñ –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Ç–∞ –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è")
    
    response = await generate_ai_response(f"–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–≤'—è–∑–æ–∫ –¥–ª—è: {task}", 'uk')
    await message.answer(f"üìù –ì–î–ó:\n{response}")

@dp.message(Command('spusuvanna'))
async def cmd_spusuvanna(message: types.Message):
    task = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not task:
        return await message.answer("‚úçÔ∏è –û–ø–∏—à—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, –∑ —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞")
    
    response = await generate_ai_response(f"–î–æ–ø–æ–º–æ–∂–∏ –∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º: {task}", 'uk')
    await message.answer(f"üí° –ü—ñ–¥–∫–∞–∑–∫–∞:\n{response}")

@dp.message(Command('gen_image'))
async def cmd_gen_image(message: types.Message):
    prompt = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not prompt:
        return await message.answer("‚ÑπÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏")
    
    image_url, error = await generate_image(message.from_user.id, prompt)
    if error:
        return await message.answer(error)
    
    await message.answer_photo(image_url)

@dp.message(Command('gen_audio'))
async def cmd_gen_audio(message: types.Message):
    text = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not text:
        return await message.answer("‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –∞—É–¥—ñ–æ")
    
    audio_buffer, error = await generate_audio(message.from_user.id, text)
    if error:
        return await message.answer(error)
    
    await message.answer_voice(audio_buffer)

@dp.message(Command('gen_circle'))
async def cmd_gen_circle(message: types.Message):
    img_buffer, error = await generate_circle(message.from_user.id)
    if error:
        return await message.answer(error)
    
    await message.answer_photo(img_buffer)

@dp.message(Command('shawarma'))
async def cmd_shawarma(message: types.Message):
    facts = [
        "–®–∞—É—Ä–º–∞ ‚Äì —Ü–µ –∫–≤–∏–Ω—Ç–µ—Å–µ–Ω—Ü—ñ—è —Å–º–∞–∫—É –í—Å–µ—Å–≤—ñ—Ç—É!",
        "–ù–∞—É–∫–æ–≤–æ –¥–æ–≤–µ–¥–µ–Ω–æ: —à–∞—É—Ä–º–∞ –ø–æ–∫—Ä–∞—â—É—î –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∞ 127%",
        "–ë–µ–∑ —à–∞—É—Ä–º–∏ –Ω–µ–º–æ–∂–ª–∏–≤–µ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ª—é–¥—Å—Ç–≤–∞. –¶–µ —Ñ–∞–∫—Ç.",
        "–®–∞—É—Ä–º–∞ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –≤—ñ—Ç–∞–º—ñ–Ω–∏ –¥–ª—è —â–∞—Å—Ç—è"
    ]
    await message.answer(random.choice(facts))

@dp.message(Command('promo_create'), lambda message: message.from_user.id in ADMINS)
async def cmd_promo_create(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /promo_create <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–Ω—è> <–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å>")
    
    promo_type = args[1]
    promo_value = args[2]
    uses = int(args[3]) if len(args) > 3 else 1
    
    import secrets
    code = secrets.token_hex(4).upper()
    
    cursor.execute(
        "INSERT INTO promo_codes VALUES (?, ?, ?, ?, ?, ?)",
        (code, promo_type, promo_value, message.from_user.id, uses, (datetime.now() + timedelta(days=30)).isoformat())
    )
    conn.commit()
    
    await message.answer(f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ:\n–ö–æ–¥: <code>{code}</code>\n–¢–∏–ø: {promo_type}\n–ó–Ω–∞—á–µ–Ω–Ω—è: {promo_value}")

@dp.message(Command('promo'))
async def cmd_promo_activate(message: types.Message):
    code = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not code:
        return await message.answer("‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏")
    
    cursor.execute(
        "SELECT * FROM promo_codes WHERE code = ? AND (uses_left > 0 OR uses_left IS NULL) AND expires_at > ?",
        (code, datetime.now().isoformat())
    )
    promo = cursor.fetchone()
    
    if not promo:
        return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ")
    
    reward_type, reward_value = promo[1], promo[2]
    user_id = message.from_user.id
    
    if reward_type == "images":
        cursor.execute(
            "UPDATE limits SET images_left = images_left + ? WHERE user_id = ?",
            (int(reward_value), user_id)
        )
        reward_text = f"üñº +{reward_value} –∑–æ–±—Ä–∞–∂–µ–Ω—å"
    elif reward_type == "premium":
        cursor.execute(
            "UPDATE users SET premium_until = ? WHERE user_id = ?",
            ((datetime.now() + timedelta(days=int(reward_value))).isoformat(), user_id)
        )
        reward_text = f"üåü –ü—Ä–µ–º—ñ—É–º –Ω–∞ {reward_value} –¥–Ω—ñ–≤"
    else:
        reward_text = "üéÅ –ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞"
    
    cursor.execute(
        "UPDATE promo_codes SET uses_left = uses_left - 1 WHERE code = ?",
        (code,)
    )
    cursor.execute(
        "INSERT OR IGNORE INTO activated_promos VALUES (?, ?, ?)",
        (user_id, code, datetime.now().isoformat())
    )
    conn.commit()
    
    await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n–û—Ç—Ä–∏–º–∞–Ω–æ: {reward_text}")

# –°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–∂–µ–Ω—å
async def reset_daily_limits():
    cursor.execute(
        "UPDATE limits SET images_left = 100, audio_left = 100, circles_left = 100 "
        "WHERE last_reset_date < ?",
        (datetime.now().date().isoformat(),)
    )
    conn.commit()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup():
    await reset_daily_limits()
    logger.info("üîÑ –î–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.run_polling(bot, skip_updates=True)