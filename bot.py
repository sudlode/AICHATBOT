import os
import logging
from telebot import TeleBot, types
from telebot.util import quick_markup
from dotenv import load_dotenv

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
load_dotenv()

class Config:
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    ADMINS = [1119767022]  # –í–∞—à Telegram ID

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not Config.BOT_TOKEN:
    logger.error("–ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = TeleBot(Config.BOT_TOKEN)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def main_menu():
    return quick_markup({
        '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞': {'callback_data': 'help'},
        'üé§ –ì–æ–ª–æ—Å–æ–≤–µ': {'callback_data': 'voice'},
        'üë®‚Äçüíª –ê–¥–º—ñ–Ω–∫–∞': {'callback_data': 'admin'}
    }, row_width=2)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        bot.reply_to(
            message,
            "üåü –í—ñ—Ç–∞—é! –Ø –≤–∞—à –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫.",
            reply_markup=main_menu()
        )
        logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    try:
        if call.data == 'help':
            bot.send_message(
                call.message.chat.id,
                "üìö –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
                "/voice - –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            )
        elif call.data == 'voice':
            msg = bot.send_message(
                call.message.chat.id,
                "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –≥–æ–ª–æ—Å:"
            )
            bot.register_next_step_handler(msg, process_voice)
        elif call.data == 'admin':
            if call.from_user.id in Config.ADMINS:
                show_admin_panel(call.message)
            else:
                bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

def process_voice(message):
    try:
        text = message.text.strip()
        if not text:
            bot.reply_to(message, "‚ùå –í–∏ –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç!")
            return
            
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É
        bot.reply_to(message, f"üîä –í–∞—à —Ç–µ–∫—Å—Ç: {text}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å—É: {e}")

def show_admin_panel(message):
    try:
        bot.send_message(
            message.chat.id,
            "üë®‚Äçüíª –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=quick_markup({
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {'callback_data': 'stats'},
                'üì¢ –†–æ–∑—Å–∏–ª–∫–∞': {'callback_data': 'broadcast'}
            })
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ó–±—ñ–π —É —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
