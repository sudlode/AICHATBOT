import os
import json
import random
import telebot
from datetime import datetime, timedelta
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from pydub import AudioSegment
from googlesearch import search
from dotenv import load_dotenv  # –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ä—è–¥–æ–∫ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
load_dotenv()  # –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ä—è–¥–æ–∫ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

# API –∫–ª—é—á—ñ
TOKEN = os.getenv("TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –í–∞—à –∫–ª—é—á –¥–ª—è OpenAI

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞—à–æ–≥–æ Telegram ID –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")  # –í–∞—à ID –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó, –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
history_file = "history.json"
banned_users_file = "banned_users.json"
promo_codes_file = "promo_codes.json"
statistics_file = "statistics.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
def load_history():
    if os.path.exists(history_file):
        with open(history_file, 'r') as file:
            return json.load(file)
    return {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def load_banned_users():
    if os.path.exists(banned_users_file):
        with open(banned_users_file, 'r') as file:
            return json.load(file)
    return []

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
def load_promo_codes():
    if os.path.exists(promo_codes_file):
        with open(promo_codes_file, 'r') as file:
            return json.load(file)
    return {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_statistics():
    if os.path.exists(statistics_file):
        with open(statistics_file, 'r') as file:
            return json.load(file)
    return {"requests": 0, "bans": 0, "promo_codes_used": 0}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
def save_history(history):
    with open(history_file, 'w') as file:
        json.dump(history, file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def save_banned_users(banned_users):
    with open(banned_users_file, 'w') as file:
        json.dump(banned_users, file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
def save_promo_codes(promo_codes):
    with open(promo_codes_file, 'w') as file:
        json.dump(promo_codes, file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_statistics(statistics):
    with open(statistics_file, 'w') as file:
        json.dump(statistics, file)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é
def add_to_history(user_id, text):
    banned_users = load_banned_users()
    if user_id in banned_users:
        return "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ —Ü–∏–º –±–æ—Ç–æ–º."

    history = load_history()
    if user_id not in history:
        history[user_id] = {"requests": [], "daily_limit": 0, "last_reset": datetime.now().strftime("%Y-%–º-%d %H:%–ú:%S")}
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    last_reset = datetime.strptime(history[user_id]["last_reset"], "%Y-%–º-%–¥ %H:%–ú:%S")
    if datetime.now() - last_reset >= timedelta(days=1):
        history[user_id]["daily_limit"] = 0
        history[user_id]["last_reset"] = datetime.now().strftime("%Y-%–º-%–¥ %H:%–ú:%S")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤
    if history[user_id]["daily_limit"] >= 100:
        return "–í–∏ –¥–æ—Å—è–≥–ª–∏ —Å–≤–æ–≥–æ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É —É 100 –∑–∞–ø–∏—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑–∞–≤—Ç—Ä–∞."

    # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç
    history[user_id]["requests"].append({"text": text, "time": datetime.now().strftime("%Y-%–º-%–¥ %H:%–ú:%S")})
    history[user_id]["daily_limit"] += 1
    save_history(history)
    return None  # –ü–æ–≤–µ—Ä—Ç–∞—î None, —è–∫—â–æ –ª—ñ–º—ñ—Ç –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—ñ–≤ –ø—Ä–æ —à–∞—É—Ä–º—É
def generate_shawarma_text():
    texts = [
        "–®–∞—É—Ä–º–∞ - —Ü–µ –∂–∏—Ç—Ç—è! –ö–æ–∂–µ–Ω —à–º–∞—Ç–æ—á–æ–∫ - —Ü–µ —è–∫ —Å–≤—è—Ç–æ —É —Ä–æ—Ç—ñ!",
        "–ß–∏ –∑–Ω–∞—î—Ç–µ –≤–∏? –®–∞—É—Ä–º–∞ - —Ü–µ —Å–µ–∫—Ä–µ—Ç —â–∞—Å—Ç—è! üåØ",
        "–Ø–∫–±–∏ —è –º—ñ–≥, —è –± —ó–≤ —à–∞—É—Ä–º—É –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è!",
        "–®–∞—É—Ä–º–∞ - —Ü–µ –º–æ—è –¥—É—à–∞. –Ø–∫ —ñ —è, –≤–æ–Ω–∞ –∑–≥–æ—Ä–Ω—É—Ç–∞ —ñ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∞ —Å–º–∞–∫–æ–º!",
        "–•—Ç–æ –ø–æ—Ç—Ä–µ–±—É—î –ª—é–±–æ–≤—ñ, –∫–æ–ª–∏ —î —à–∞—É—Ä–º–∞? üòã"
    ]
    return random.choice(texts)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤ (–∑–≤—É–∫–∏ —à–∞—É—Ä–º–∏)
def generate_shawarma_sound():
    # –°—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–≤—É–∫ - –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –∑–≤—É–∫–∏ —à–∞—É—Ä–º–∏, —è–∫—â–æ –º–∞—î—Ç–µ —ó—Ö —É —Ñ–æ—Ä–º–∞—Ç—ñ –∞—É–¥—ñ–æ
    sound = AudioSegment.from_file("shawarma_sound.mp3")  # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∞—à –≤–ª–∞—Å–Ω–∏–π –∑–≤—É–∫–æ–≤–∏–π —Ñ–∞–π–ª
    audio_file = BytesIO()
    sound.export(audio_file, format="mp3")
    audio_file.seek(0)
    return audio_file

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–æ—Ç–æ (–∫—Ä—É–∂–µ—á–æ–∫ –∑ —Ç–µ–∫—Å—Ç–æ–º)
def generate_circle_image(text):
    img = Image.new('RGB', (200, 200), color=(255, 255, 255))
    d = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    d.text((10, 80), text, fill=(0, 0, 0), font=font)
    bio_image = BytesIO()
    img.save(bio_image, format='PNG')
    bio_image.seek(0)
    return bio_image

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(commands=['ban_user'])
def ban_user(message):
    if message.from_user.id == int(ADMIN_USER_ID):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        user_id = int(message.text.split()[1])  # –í–∏—Ç—è–≥–Ω—É—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        banned_users = load_banned_users()
        if user_id not in banned_users:
            banned_users.append(user_id)
            save_banned_users(banned_users)
            bot.reply_to(message, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        else:
            bot.reply_to(message, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    else:
        bot.reply_to(message, "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
@bot.message_handler(commands=['promo_create'])
def promo_create(message):
    if message.from_user.id == int(ADMIN_USER_ID):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        promo_code = message.text.split()[1]  # –í–∏—Ç—è–≥–Ω—É—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥
        promo_codes = load_promo_codes()
        if promo_code not in promo_codes:
            promo_codes.append(promo_code)
            save_promo_codes(promo_codes)
            bot.reply_to(message, f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        else:
            bot.reply_to(message, f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –≤–∂–µ —ñ—Å–Ω—É—î.")
    else:
        bot.reply_to(message, "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['stats'])
def stats(message):
    if message.from_user.id == int(ADMIN_USER_ID):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        statistics = load_statistics()
        stats_message = f"–ó–∞–ø–∏—Ç–∏: {statistics['requests']}\n–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è: {statistics['bans']}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏: {statistics['promo_codes_used']}"
        bot.reply_to(message, stats_message)
    else:
        bot.reply_to(message, "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –ø—Ä–æ —à–∞—É—Ä–º—É
@bot.message_handler(commands=['shawarma'])
def shawarma(message):
    response = add_to_history(message.from_user.id, "/shawarma")
    if response:
        bot.reply_to(message, response)
    else:
        text = generate_shawarma_text()
        bot.reply_to(message, text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—É–∫—ñ–≤ —à–∞—É—Ä–º–∏
@bot.message_handler(commands=['shawarma_sound'])
def shawarma_sound(message):
    response = add_to_history(message.from_user.id, "/shawarma_sound")
    if response:
        bot.reply_to(message, response)
    else:
        audio = generate_shawarma_sound()
        bot.send_audio(message.chat.id, audio)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫—Ä—É–∂–µ—á–∫–∞ –∑ —Ç–µ–∫—Å—Ç–æ–º
@bot.message_handler(commands=['circle_image'])
def circle_image(message):
    text = "–®–∞—É—Ä–º–∞!"
    response = add_to_history(message.from_user.id, "/circle_image")
    if response:
        bot.reply_to(message, response)
    else:
        image = generate_circle_image(text)
        bot.send_photo(message.chat.id, image)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—à—É–∫—É –≤ Google
@bot.message_handler(commands=['google'])
def google_search(message):
    query = " ".join(message.text.split()[1:])
    if query:
        results = search(query, num_results=5)
        bot.reply_to(message, "\n".join(results))
    else:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ì–î–ó
@bot.message_handler(commands=['gdz'])
def gdz(message):
    bot.reply_to(message, "–û—Å—å –¥–µ—è–∫—ñ —Å–∞–π—Ç–∏ –∑ –ì–î–ó:\n- https://www.gdz.ru/\n- https://gdz-online.com/")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(commands=['history'])
def history(message):
    user_id = message.from_user.id
    history_data = load_history()
    bot.reply_to(message, str(history_data.get(user_id, "–Ü—Å—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")))

bot.polling()
