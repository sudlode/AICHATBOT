import os
import json
import random
import telebot
import requests
from datetime import datetime, timedelta
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from pydub import AudioSegment
from googlesearch import search
import pytesseract
from bs4 import BeautifulSoup
from io import BytesIO

# API –∫–ª—é—á—ñ
TOKEN = os.getenv("TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –í–∞—à –∫–ª—é—á –¥–ª—è OpenAI

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞—à–æ–≥–æ Telegram ID –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")  # –í–∞—à ID –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó, –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
history_file = "history.json"
banned_users_file = "banned_users.json"
promo_codes_file = "promo_codes.json"
statistics_file = "statistics.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
def load_history():
    if os.path.exists(history_file):
        with open(history_file, 'r') as file:
            return json.load(file)
    return {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def load_banned_users():
    if os.path.exists(banned_users_file):
        with open(banned_users_file, 'r') as file:
            return json.load(file)
    return []

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
def load_promo_codes():
    if os.path.exists(promo_codes_file):
        with open(promo_codes_file, 'r') as file:
            return json.load(file)
    return {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_statistics():
    if os.path.exists(statistics_file):
        with open(statistics_file, 'r') as file:
            return json.load(file)
    return {"requests": 0, "bans": 0, "promo_codes_used": 0}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
def save_history(history):
    with open(history_file, 'w') as file:
        json.dump(history, file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def save_banned_users(banned_users):
    with open(banned_users_file, 'w') as file:
        json.dump(banned_users, file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
def save_promo_codes(promo_codes):
    with open(promo_codes_file, 'w') as file:
        json.dump(promo_codes, file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_statistics(statistics):
    with open(statistics_file, 'w') as file:
        json.dump(statistics, file)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é
def add_to_history(user_id, text):
    banned_users = load_banned_users()
    if user_id in banned_users:
        return "You are banned and cannot interact with this bot."

    history = load_history()
    if user_id not in history:
        history[user_id] = {"requests": [], "daily_limit": 0, "last_reset": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    last_reset = datetime.strptime(history[user_id]["last_reset"], "%Y-%m-%d %H:%M:%S")
    if datetime.now() - last_reset >= timedelta(days=1):
        history[user_id]["daily_limit"] = 0
        history[user_id]["last_reset"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤
    if history[user_id]["daily_limit"] >= 100:
        return "You have reached your daily limit of 100 requests. Please try again tomorrow."

    # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç
    history[user_id]["requests"].append({"text": text, "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
    history[user_id]["daily_limit"] += 1
    save_history(history)
    return None  # –ü–æ–≤–µ—Ä—Ç–∞—î None, —è–∫—â–æ –ª—ñ–º—ñ—Ç –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ

# –ö–æ—Ä–æ—Ç–∫—ñ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏—Ö
@bot.message_handler(commands=['kontrolna_tip'])
def kontrolna_tip(message):
    subject = message.text.split(' ', 1)[1].lower() if len(message.text.split()) > 1 else ''
    tips = {
        'mathematics': "For math, remember to use formulas for area, volume, and algebraic expressions. Example: Area of a circle = pi * r^2.",
        'physics': "In physics, focus on the main laws of motion and the formulas for energy and force. Example: F = ma.",
        'chemistry': "In chemistry, remember to balance equations and understand the periodic table. Example: H2 + O2 = H2O.",
        'history': "For history, focus on key events like the World Wars, revolutions, and major discoveries.",
        'biology': "For biology, understand cellular processes and the classification of life forms."
    }
    
    if subject in tips:
        bot.reply_to(message, tips[subject])
    else:
        bot.reply_to(message, "Please provide a valid subject. Example: /kontrolna_tip mathematics")

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—ñ–≤ –ø—Ä–æ —à–∞—É—Ä–º—É
def generate_shawarma_text():
    texts = [
        "Shawarma is life! Every bite is like a party in my mouth!",
        "Did you know? Shawarma is the secret to happiness! üåØ",
        "If I could, I would eat Shawarma every day!",
        "Shawarma is my soulmate. Just like me, it‚Äôs rolled up and filled with flavor!",
        "Who needs love when you have Shawarma? üòã"
    ]
    return random.choice(texts)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤ (–∑–≤—É–∫–∏ —à–∞—É—Ä–º–∏)
def generate_shawarma_sound():
    sound = AudioSegment.from_file("shawarma_sound.mp3")  # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∞—à –≤–ª–∞—Å–Ω–∏–π –∑–≤—É–∫–æ–≤–∏–π —Ñ–∞–π–ª
    audio_file = BytesIO()
    sound.export(audio_file, format="mp3")
    audio_file.seek(0)
    return audio_file

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–æ—Ç–æ (–∫—Ä—É–∂–µ—á–æ–∫ –∑ —Ç–µ–∫—Å—Ç–æ–º)
def generate_circle_image(text):
    img = Image.new('RGB', (200, 200), color=(255, 255, 255))
    d = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    d.text((10, 80), text, fill=(0, 0, 0), font=font)
    bio_image = BytesIO()
    img.save(bio_image, format='PNG')
    bio_image.seek(0)
    return bio_image

# –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ —Ñ–æ—Ç–æ (OCR)
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
    
    response = requests.get(file_url)
    img = Image.open(BytesIO(response.content))
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è pytesseract –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    text = pytesseract.image_to_string(img)
    
    if text:
        bot.reply_to(message, f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {text}")
    else:
        bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ.")

# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤ –∑ –ì–î–ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ —Å–∞–π—Ç—É https://www.gdz.ru/)
def parse_gdz(query):
    url = f"https://www.gdz.ru/search/?searchword={query.replace(' ', '+')}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.content, 'html.parser')
    results = soup.find_all('div', class_='search-result')

    gdz_links = []
    for result in results:
        link = result.find('a', href=True)
        if link:
            gdz_links.append(f"https://www.gdz.ru{link['href']}")
    
    return gdz_links

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—à—É–∫—É –≥–æ—Ç–æ–≤–∏—Ö –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
@bot.message_handler(commands=['gdz_search'])
def gdz_search(message):
    query = " ".join(message.text.split()[1:])
    if query:
        links = parse_gdz(query)
        if links:
            bot.reply_to(message, "\n".join(links))
        else:
            bot.reply_to(message, "No Gdz results found.")
    else:
        bot.reply_to(message, "Please provide a query to search for Gdz.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É Google
@bot.message_handler(commands=['search_answer'])
def search_answer(message):
    query = " ".join(message.text.split()[1:])
    if query:
        results = search(query, num_results=3)
        bot.reply_to(message, "\n".join(results))
    else:
        bot.reply_to(message, "Please provide a search query.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –ø—Ä–æ —à–∞—É—Ä–º—É
@bot.message_handler(commands=['shawarma_joke'])
def shawarma_joke(message):
    joke = generate_shawarma_text()
    bot.reply_to(message, joke)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É (–∑–≤—É–∫–∏ —à–∞—É—Ä–º–∏)
@bot.message_handler(commands=['shawarma_sound'])
def shawarma_sound(message):
    audio_file = generate_shawarma_sound()
    bot.send_audio(message.chat.id, audio_file)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫—Ä—É–∂–µ—á–∫–∞ –∑ —Ç–µ–∫—Å—Ç–æ–º
@bot.message_handler(commands=['generate_circle'])
def generate_circle(message):
    text = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else 'Shawarma'
    bio_image = generate_circle_image(text)
    bot.send_photo(message.chat.id, bio_image)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)